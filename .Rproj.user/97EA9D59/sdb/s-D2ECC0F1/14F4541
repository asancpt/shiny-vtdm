{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(markdown)\nlibrary(mgcv)\nlibrary(psych)\nlibrary(ggforce)\n\nCaffSigma <- matrix(c(0.120, 0, 0, \n                      0, 0.149, 0, \n                      0, 0, 0.416), nrow = 3)\nCaffMu <- c(0,0,0)\nSeed <- sample.int(10000, size = 1)\n#set.seed(20140523+1)\n#BWT = 25; Dose = 80\n\nround_df <- function(x, digits) {\n    # round all numeric variables\n    # x: data frame \n    # digits: number of digits to round\n    numeric_columns <- sapply(x, mode) == 'numeric'\n    x[numeric_columns] <-  round(x[numeric_columns], digits)\n    x\n}\n\nDataset <- function(CCR, Dose, Num){\n  #set.seed(20140523+1)\n  MVN <- rmvn(Num, CaffMu, CaffSigma);  \n  MVNdata <- data.frame(MVN, stringsAsFactors = FALSE) %>% \n    select(eta1 = X1, eta2 = X2, eta3 = X3) %>% \n    mutate(V1 = 33.1 * exp(eta1), \n           V2 = 48.3,\n           CL = 3.96 * CCR / 100 * exp(eta2),\n           Q = 6.99 * exp(eta3),\n           k10 = CL / V1,\n           k12 = Q / V1,\n           k21 = Q / V2,\n           AUC = Dose / CL,\n           lam1 = (k10 + k12 + k21 + sqrt((k10+k12+k21)^2 - 4*k10*k21))/2,\n           lam2 = k10 + k12 + k21 - lam1,\n           Conc1 = (lam1 - k21)/(V1 *(lam1 - lam2)),\n           Conc2 = (k21 - lam2)/(V1 *(lam1 - lam2)))\n    return(MVNdata)\n}\n# Conc = Dose * (Conc1 * exp(-1 * lam1 * Time) + (Conc2 * exp(-1 * lam2 * Time)))\n\n\nSimul <- function(df){\n  MVNSimulRaw <- describe(df, quant = c(.25, .75)) \n  MVNSimulRaw[, \"Parameters\"] <- row.names(MVNSimulRaw)\n  MVNSimul <- MVNSimulRaw %>% select(Parameters, median, sd, min, Q0.25, mean, Q0.75, max)\n  return(MVNSimul)\n}\n\nshinyServer(function(input, output, session) {\n    output$showdata <- renderDataTable({\n        ### Start ###\n        \n        set.seed(Seed)\n        #showdataTable <- round_df(Dataset(input$concCCR, input$concDose, input$concNum), 2) %>% \n        showdataTable <- Dataset(input$concCCR, input$concDose, input$concNum) %>% \n            mutate(SUBJID = row_number()) %>% \n            select(9, 1:8)\n        return(showdataTable)\n    }, options = list(pageLength = 10))\n    \n    output$showdataall <- renderTable({\n        ### Start ###\n        \n        if (input$showme == FALSE)\n            return(NULL)\n        \n        set.seed(Seed)\n        showall <- Dataset(input$concCCR, input$concDose, input$concNum) %>% \n            mutate(SUBJID = as.character(row_number()))\n        return(showall)\n    })\n    \n    output$concplot <- renderPlot({\n        Subject <- seq(1, input$concNum, length.out = input$concNum) # \n        Time <- seq(0,24, by = 0.1)\n        Grid <- expand.grid(x = Subject, y = Time) %>% select(Subject=x, Time=y)\n        \n        set.seed(Seed)\n        ggConc <- Dataset(input$concCCR, input$concDose, input$concNum) %>% \n            mutate(Subject = row_number()) %>% \n            left_join(Grid, by = \"Subject\") %>% \n            mutate(Conc = input$concDose * (Conc1 * exp(-1 * lam1 * Time) + (Conc2 * exp(-1 * lam2 * Time))))\n\n        p <- ggplot(ggConc, aes(x=Time, y=Conc, group = Subject, colour = Conc)) + \n            xlab(\"Time (hour)\") + ylab(\"Concentration (mg/L)\") +\n            scale_x_continuous(breaks = seq(from = 0, to = 24, by = 4)) +\n            geom_line()\n        \n        print(p)\n    })\n    \n    output$conccontents <- renderTable({\n        ### Start ###\n        Subject <- seq(1, input$concNum, length.out = input$concNum) # \n        Time <- seq(0,24, by = 1)\n        Grid <- expand.grid(x = Subject, y = Time) %>% select(Subject=x, Time=y)\n        \n        set.seed(Seed)\n        ggConc <- Dataset(input$concCCR, input$concDose, input$concNum) %>% \n            mutate(Subject = row_number()) %>% \n            left_join(Grid, by = \"Subject\") %>% \n            mutate(Conc = input$concDose * (Conc1 * exp(-1 * lam1 * Time) + (Conc2 * exp(-1 * lam2 * Time))))\n        return(ggConc)\n    })\n})\n",
    "created" : 1482131827181.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1430355888",
    "id" : "14F4541",
    "lastKnownWriteTime" : 1482133680,
    "last_content_update" : 1482133680299,
    "path" : "~/GIT/shiny/vtdm/server.R",
    "project_path" : "server.R",
    "properties" : {
        "marks" : "<:68,7\n>:68,8"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}